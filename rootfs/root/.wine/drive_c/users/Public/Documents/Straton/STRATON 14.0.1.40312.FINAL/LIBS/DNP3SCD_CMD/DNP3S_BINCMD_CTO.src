(* CA[0] (IN/OUT) *)
    (* CAIx xxxx cccc cccc | Rxxx xxxx rrrr rrrr *)
    (* (IN) C : Flag command *)
    (* (IN) A : abort *)
    (* (IN) I : Init bloc *)
    (* (IN) cccc : command (_DNP3S_CODE_SELECT/_DNP3S_CODE_OPERATE/_DNP3S_CODE_DIRECTOPERATE) *)
    (* (OUT) R : Flag response *)
    (* (OUT) rrrr : num response (_STATUSCODE_SUCCESS, ..., _STATUSCODE_UNDEFINED) *)
(* CA[1] (IN) *)
    (* oooooooo cccccccc tttttttt uuuuuuuu*)
    (* oooooooo operation : _DNP3S_OP_NUL,_DNP3S_OP_PULSEON,_OPERATION_PULSEOFF,_DNP3S_OP_LATCHON,_DNP3S_OP_LATCHOFF *)
    (* cccccccc clear : 0 or 1 *)
    (* tttttttt TCC : _DNP3S_TCC_NUL,_DNP3S_TCC_CLOSE,_DNP3S_TCC_TRIP *)
    (* uuuuuuuu Count : count value *)
(* CA[2] (IN) *) 
    (* OnTime *)
(* CA[3] (IN) *) 
    (* OffTime *)
(* CA[4] (OUT) *) 
    (* Value to write to binary output *)


(* Temporary store first item of array : used for handshaking *)    
CC := CA[0] ;

(* Init/Enable *)
if (CC.29 = 1) then 
    _iState := _DNP3S_SM_NUL;
    _bStartTimer := FALSE ;
    CA[4] := 0 ;
    OP        := 0 ;
    STATE_OP := _DNP3S_STATUS_UNDEFINED;
    STATE_MACHINE := _iState;
    CC.29   := 0 ;
    CA[0] := CC ;
    return ; 
end_if;


(* Get current command and response value *)
_CODECMD    := LOBYTE(HIWORD(CC)) ;    (* Command value *)
_CODERSP    := LOBYTE(LOWORD(CC)) ;    (* Response value *)
_OPERATION  := HIBYTE(HIWORD(CA[1])) ; (* Operation type : _DNP3S_OP_PULSEON, _DNP3S_OP_LATCHON, ... *)
_CLEAR      := LOBYTE(HIWORD(CA[1])) ; (* Clear field not used *)
_TCC        := HIBYTE(LOWORD(CA[1])) ; (* Trip-Close Code field : _DNP3S_TCC_NULL, _DNP3S_TCC_CLOSE, _DNP3S_TCC_TRIP *)
_COUNT      := LOBYTE(LOWORD(CA[1])) ; (* Count not used *)
_ONTIME     := CA[2];
_OFFTIME    := CA[3];


(* Abort flag armed *)
if (CC.30 = 1) then 
    CC := MAKEDWORD(MAKEWORD(16#00, _CODECMD), MAKEWORD(16#80, _DNP3S_STATUS_CANCELLED)) ;
    OP       := LOBYTE(HIWORD(CC)) ;
    STATE_OP := LOBYTE(LOWORD(CC));
    _iState  := _DNP3S_SM_NUL ;
    _bStartTimer := FALSE ;
    STATE_MACHINE := _iState;
    CA[0] := CC ;
    return ; 
end_if ;

(* No command : just copy OUT values *)    
if (CC.31 = 0) then 
    OP       := LOBYTE(HIWORD(CC)) ;
    STATE_OP := LOBYTE(LOWORD(CC));
    STATE_MACHINE := _iState;
    CA[0]   := CC ;
    return ; 
end_if ;


(* State machine complementary latch model *)
 case _CODECMD of 
     
     _DNP3S_CODE_SELECT:
     
         case _OPERATION of 
             
            _DNP3S_OP_NUL      :
                _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                
            _DNP3S_OP_PULSEON :
                case _TCC of
                    _DNP3S_TCC_NUL:
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                    _DNP3S_TCC_CLOSE:
                        _CODERSP := S_SELECT;
                    _DNP3S_TCC_TRIP:
                        _CODERSP := S_SELECT;
                    else
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                end_case;                 
                
            _DNP3S_OP_LATCHON,_DNP3S_OP_LATCHOFF :
                case _TCC of
                    _DNP3S_TCC_NUL:
                        _CODERSP := S_SELECT;
                    else
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                end_case;                  
            
            else
                _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
         end_case;
         
    _DNP3S_CODE_OPERATE,_DNP3S_CODE_DIRECTOPERATE:

         case _OPERATION of 
             
            _DNP3S_OP_NUL      :
                _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                
            _DNP3S_OP_PULSEON :
                case _TCC of
                    _DNP3S_TCC_NUL:
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                        
                    _DNP3S_TCC_CLOSE:
                        _CODERSP := S_OPERATE;
                        Inst_TON(_bStartTimer, ANY_TO_TIME(CA[2])) ;
                        if (_iState = _DNP3S_SM_NUL) then
                            _iState := _DNP3S_SM_INPROGRESS ;
                            _bStartTimer := TRUE ;
                            CA[4] := 65 ;
                        elsif (_iState = 1) then
                             if (Inst_TON.Q = 1) then
                                 _iState := _DNP3S_SM_FINISHED ;
                                _bStartTimer := FALSE ;
                                 CA[4] := 0 ;
                             end_if;
                        end_if;
                        
                       
                    _DNP3S_TCC_TRIP:
                        _CODERSP := S_OPERATE;
                        Inst_TON(_bStartTimer, ANY_TO_TIME(CA[2])) ;
                        if (_iState = _DNP3S_SM_NUL) then
                            _iState := _DNP3S_SM_INPROGRESS ;
                            _bStartTimer := TRUE ;
                            CA[4] := 129 ;
                        elsif (_iState = 1) then
                             if (Inst_TON.Q = 1) then
                                 _iState := _DNP3S_SM_FINISHED ;
                                _bStartTimer := FALSE ;
                                 CA[4] := 0 ;
                             end_if;
                        end_if;
                             
                    else
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                end_case;                 
                
            _DNP3S_OP_LATCHON  :
                case _TCC of
                    _DNP3S_TCC_NUL:
                        _CODERSP := S_OPERATE;
                        Inst_TON(_bStartTimer, ANY_TO_TIME(CA[2])) ;
                        if (_iState = _DNP3S_SM_NUL) then
                            _iState := _DNP3S_SM_INPROGRESS ;
                            _bStartTimer := TRUE ;
                            CA[4] := 3 ;
                        elsif (_iState = 1) then
                             if (Inst_TON.Q = 1) then
                                 _iState := _DNP3S_SM_FINISHED ;
                                 _bStartTimer := FALSE ;
                                 CA[4] := 0 ;
                             end_if;
                        end_if;
                    else
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                end_case;                  
            
            _DNP3S_OP_LATCHOFF :
                case _TCC of
                    _DNP3S_TCC_NUL:
                        _CODERSP := S_OPERATE;
                        Inst_TON(_bStartTimer, ANY_TO_TIME(CA[2])) ;
                        if (_iState = _DNP3S_SM_NUL) then
                            _iState := _DNP3S_SM_INPROGRESS ;
                            _bStartTimer := TRUE ;
                            CA[4] := 3 ;
                        elsif (_iState = 1) then
                             if (Inst_TON.Q = 1) then
                                 _iState := _DNP3S_SM_FINISHED ;
                                 _bStartTimer := FALSE ;
                                 CA[4] := 0 ;
                             end_if;
                        end_if;
                    else
                        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
                end_case;
            
            else
                _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;
         end_case;
     
    else
        _CODERSP := _DNP3S_STATUS_NOTSUPPORTED ;

 end_case;         
 
 
 (* Reset command (except for PENDING response) and Set Response *)
 if (_CODERSP <> _DNP3S_STATUS_PENDING) then
    CC := MAKEDWORD(MAKEWORD(16#00, _CODECMD), MAKEWORD(16#80, _CODERSP)) ;
else
    CC := MAKEDWORD(MAKEWORD(16#80, _CODECMD), MAKEWORD(16#80, _CODERSP)) ;
end_if;

OP       := LOBYTE(HIWORD(CC)) ;
STATE_OP := LOBYTE(LOWORD(CC));
STATE_MACHINE := _iState;
CA[0]   := CC ;
     
